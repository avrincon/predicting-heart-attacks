---
title: "Logistic Regression"
format: html
---

# Aim

Fit logistic regression model to predict whether a patient will have a heart attack.

```{r}
library(car)        
library(performance) 
library(MASS)      
library(pROC)      
library(tidyverse) 
library(caret) 
library(broom)
library(flextable)

# for loading support functions during development
for (file in list.files("R", pattern = "\\.R$", full.names = TRUE)) {
  source(file)
}

# (pal <- PNWColors::pnw_palette("Bay", 8, type="continuous"))
```

```{r}
d_raw <- read_csv("data/heart_attack_risk_clean.csv")
```

# Exploratory data checks


## Check balance of target variable


```{r}
d_raw |> 
  count(result) |> 
  mutate(prop = n / sum(n))
```

More positive than negative heart attack results but overall not too unbalanced.

```{r}
d_raw |> 
  group_by(result) |>
  summarise(
    mean_trop = mean(troponin),
    mean_ck_mb = mean(ck_mb)
  )
```


## Check distribution of predictor variables

```{r}
d_raw |>  
  select(age, gender, heart_rate, systolic_blood_pressure, 
         diastolic_blood_pressure, blood_sugar, ck_mb, troponin) |> 
  summary() 

```

```{r}
# Create a named vector for your custom labels
custom_labels <- c(
  age = "Age",
  heart_rate = "Heart Rate (bpm)",
  systolic_blood_pressure = "Systolic BP (mmHg)",
  diastolic_blood_pressure = "Diastolic BP (mmHg)",
  blood_sugar = "Blood Sugar (mg/dL)",
  ck_mb = "CK-MB (ng/mL)",
  troponin = "Troponin (ng/mL)"
)

d_raw |> 
  select(age, heart_rate, systolic_blood_pressure, diastolic_blood_pressure, 
         blood_sugar, ck_mb, troponin) |> 
  gather(key = "variable", value = "value") |> 
  ggplot(aes(x = variable, y = value)) +
  geom_boxplot() +
  facet_wrap(~ variable, scales = "free") +
  theme_minimal() +
  labs(title = "Boxplots for Numeric Predictors")

(p_hist <- 
    d_raw |> 
    select(age, heart_rate, systolic_blood_pressure, diastolic_blood_pressure, 
           blood_sugar, ck_mb, troponin) |> 
    gather(key = "variable", value = "value") |> 
    ggplot(aes(x = value)) +  
    geom_histogram(fill = "#2E9093", color = "white", bins = 30) +
    facet_wrap(
      ~ variable, 
      scales = "free",
      labeller = labeller(variable = as_labeller(custom_labels))
    ) +
    theme_minimal() +
    labs(
      title = "Histograms for Numeric Predictors",
      x = "Value",
      y = "Count"
    ) +
    theme(
      text = element_text(size = 14)
    )
)
# ggsave(
#   "figures/histograms_raw.png",
#   p_hist,
#   width = 9,
#   height = 5,
#   dpi = 500,
#   bg = "white"
# )
```

- Exclude three observations for `heart_rate` with extreme anomalous results that are likely measurement erros
- Apply log transformation to `troponin` and `ck_mb` since they are both highly skewed


```{r}
# d_raw |> filter(heart_rate > 900) |> View()

d_clean <- 
  d_raw |> 
  filter(heart_rate < 900) |> 
  mutate(
    log_ck_mb = log(ck_mb),
    log_troponin = log(troponin)
  ) |> 
  mutate(
    # set categorical variables as factors
    across(result, ~factor(., levels = c("negative", "positive"))),
    across(gender, ~factor(., levels = c("Female", "Male")))
  )
```

```{r}
custom_labels2 <- c(
  age = "Age",
  heart_rate = "Heart Rate (bpm)",
  systolic_blood_pressure = "Systolic BP (mmHg)",
  diastolic_blood_pressure = "Diastolic BP (mmHg)",
  blood_sugar = "Blood Sugar (mg/dL)",
  log_ck_mb = "Log CK-MB (ng/mL)",
  log_troponin = "Log Troponin (ng/mL)"
)

(p_hist2 <- 
    d_clean |> 
    select(age, heart_rate, systolic_blood_pressure, diastolic_blood_pressure, 
           blood_sugar, log_ck_mb, log_troponin) |> 
    gather(key = "variable", value = "value") |> 
    ggplot(aes(x = value)) +  
    geom_histogram(fill = "#2E9093", color = "white", bins = 30) +
    labs(
      title = "Histograms for Numeric Predictors",
      x = "Value",
      y = "Count"
    ) +
    facet_wrap(
      ~ variable, 
      scales = "free",
      labeller = labeller(variable = as_labeller(custom_labels2))
    ) +
    theme_minimal() +
    theme(
      text = element_text(size = 14)
    )
)
# ggsave(
#   "figures/histograms.png",
#   p_hist2,
#   width = 9,
#   height = 5,
#   dpi = 500,
#   bg = "white"
# )
```


Create correlation matrix to check for highly correlated predictors

```{r}
d_clean |> 
  select(age,heart_rate, systolic_blood_pressure,
         diastolic_blood_pressure, 
         blood_sugar, log_ck_mb, log_troponin) |> 
  cor() |> 
  round(2)
```

Check balance of result again

```{r}
(p_result <- 
  d_clean |> 
  count(result) |> 
  mutate(
    prop = format(n / sum(n) * 100, digits = 1, nsmall = 1),
    lab = paste0(prop, "%"),
    result = str_to_title(result)
  ) |> 
  ggplot(aes(x = result, y = n, fill = result)) +
  geom_bar(stat = "identity", width = 0.6) +
  geom_text(aes(label = lab), vjust = -0.5, size = 4) +
  scale_fill_manual(
    values = c("Negative" = "#ED950A", "Positive" = "#ADBF5F")
  ) +
  guides(fill = "none") +
  labs(
    title = "Proportion of Heart Attack Diagnosis",
    x =NULL,
    y = "Count",
    fill = "Result"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 14)
  )
)

# ggsave(
#   "figures/count_result.png",
#   p_result,
#   width = 5,
#   height = 5,
#   dpi = 500,
#   bg = "white"
# )
```


 Check balance of gender
 
```{r}
(p_gender <- 
  d_clean |> 
  count(gender) |> 
  mutate(prop = format(n / sum(n) * 100, digits = 1, nsmall = 1),
         lab = paste0(prop, "%")) |> 
  ggplot(aes(x = gender, y = n, fill = gender)) +
  geom_bar(stat = "identity", width = 0.6) +
  geom_text(aes(label = lab), vjust = -0.5, size = 4) +
  scale_fill_manual(
    values = c("Female" = "#ED950A", "Male" = "#ADBF5F")
  ) +
  guides(fill = "none") +
  labs(
    title = "Proportion of Gender",
    x = NULL,
    y = "Count",
    fill = "Result"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 14)
  )
)

# ggsave(
#   "figures/count_gender.png",
#   p_gender,
#   width = 5,
#   height = 5,
#   dpi = 500,
#   bg = "white"
# )
```
 


## Build logistic regression model


```{r}
logistic_model <- 
  glm(
    result ~ age + gender + heart_rate + systolic_blood_pressure + 
      diastolic_blood_pressure + blood_sugar + log_ck_mb + log_troponin,
    family = binomial(link = "logit"),
    data = d_clean
  )

reduced_model <- 
  glm(
    result ~ log_ck_mb + log_troponin,
    family = binomial(link = "logit"),
    data = d_clean
  )

null_mod <-
  glm(
    result ~ 1,
    family = binomial(link = "logit"),
    data = d_clean
  )
```


```{r}
anova(null_mod, logistic_model, test = "Chisq")
anova(logistic_model, reduced_model, test = "Chisq")
```

Full model is significantly better than null model containing only an intercept, indicating that the combination of predictors in the full model are collectively significant in predicting the risk of heart attacks.

The reduced model, including only CK-MB and troponin is not significantly different from the full logistic model. Could consider using either model in the final analysis but will use the full model in this case.

```{r}
fit_summary <- 
  bind_rows(
    glance(logistic_model),
    glance(reduced_model)
  ) |> 
  mutate(
    Model = c("Full Model", "Reduced Model"), 
    .before = 1
  ) |> 
  mutate(across(where(is.numeric), round)) |> 
  select(Model, AIC, BIC)

fit_summary |> 
  flextable() |> 
  autofit()
```

Information criteria (AIC and BIC) suggest that the reduced model is slightly preferred to the full model.


## Model diagnostics

Calculate VIF to check for multicollinearity

```{r}
car::vif(logistic_model)
car::vif(reduced_model)
# => Looks good
```

Check for influential points

```{r}
influencePlot(logistic_model)
influencePlot(reduced_model)

cooksd <- cooks.distance(logistic_model)
plot(cooksd, pch = 20, main = "Cook's Distance")
abline(h = 4/nrow(d_clean), col = "red")  # Rule of thumb threshold

tibble(cooksd = round(cooksd, 4)) |> 
  arrange(desc(cooksd))
```

There are influential points in both the full and reduced models but all Cook's D <1.0. The full model has fewer and less influential points than the reduced model, suggesting that the full model is more stable. Influential points may be biologically valid in this case and so it is unclear whether they should be removed. Decided to keep them in the model since the model was still able to converge.


```{r}
# d_clean |>
#   slice(c(30, 127, 209, 585, 780, 1265)) |>
#   View()
```


```{r}
# H0: The logistic regression model is appropriate.
# H1: The logistic regression model is not appropriate.
pchisq(logistic_model$deviance, logistic_model$df.residual, lower.tail = FALSE)
# => model is appropriate
```

## Model Summary

```{r}
summary(logistic_model)
summary(reduced_model)
```

```{r}
round(confint(logistic_model), 3)
round(confint(reduced_model), 3)
```

Although not quite statistically significant, age has an apparent, perhaps un-intuitive, negative relationship with heart attack risk. However, biomarkers like troponin and CK-MB are the true drivers of heart attack risk. Older people tend to have higher levels of these biomarkers, which creates an apparent relationship between age and heart attacks. When we control for the biomarker levels directly, we find that for people with the same biomarker levels, younger people might actually have a slightly higher risk (hence the negative coefficient). 

```{r}
mod_summary <- 
  tidy(
  logistic_model, 
  conf.int = TRUE, 
  # exponentiate = TRUE
) |> 
  mutate(across(where(is.numeric), ~round(., 3)))
mod_summary

tidy(reduced_model) |> 
  mutate(across(where(is.numeric), ~round(., 3)))
# augment(logistic_model) |> View()
```


```{r}
# format table for presentation
mod_summary2 <- 
  mod_summary |>
  mutate(
    across(
      term,
      ~case_when(
        . == "(Intercept)" ~ "Intercept",
        . == "age" ~ "Age",
        . == "genderMale" ~ "Gender (Male)",
        . == "heart_rate" ~ "Heart Rate",
        . == "systolic_blood_pressure" ~ "Systolic BP",
        . == "diastolic_blood_pressure" ~ "Diastolic BP",
        . == "blood_sugar" ~ "Blood Sugar",
        . == "log_ck_mb" ~ "Log CK-MB",
        . == "log_troponin" ~ "Log Troponin"
      )
    ),
    across(
      p.value,
      ~ifelse(
        . < 0.001, "<0.001", 
        formatC(., format = "f", digits = 3)
      )
    ),
    across(where(is.numeric), ~round(., 2))
  ) |> 
  relocate(p.value, .after = conf.high)

(ft_mod_summary <- 
  flextable(mod_summary2) |> 
  autofit() |> 
  set_header_labels(
    term = "Variable",
    estimate = "Estimate",
    std.error = "Std. Error",
    statistic = "z value",
    conf.low = "Lower CI",
    conf.high = "Upper CI",
    p.value = "p-value"
  ) |> 
    bg(bg = "white", part = "all")
)

# save_as_image(ft_mod_summary, path = "figures/model_summary.png")
```

## Check model performance

Confusion matrix 

```{r}
predicted_probs <-
  predict(logistic_model, type = "response")

predicted_classes <- 
  ifelse(predicted_probs > 0.5, "positive", "negative")
predicted_classes <- 
  factor(predicted_classes, levels = c("negative", "positive"))

# Create confusion matrix and get multiple metrics at once
cm <- caret::confusionMatrix(predicted_classes, d_clean$result)
```

```{r}
accuracy <- cm$overall["Accuracy"]
kappa <- cm$overall["Kappa"]

cat("Accuracy:", round(accuracy, 4), "\n")
cat("Cohen's Kappa:", round(kappa, 4), "\n")
```

checking the McFadden's pseudo R^2 based on the deviance
```{r}
1 - logistic_model$deviance/logistic_model$null.deviance
1 - reduced_model$deviance/reduced_model$null.deviance
```


```{r}
# Plot confusion matrix
cm_df <- 
  cm$table |> 
  as_tibble() |> 
  mutate(across(where(is.character), str_to_sentence)) |> 
  rename_with(~c("Prediction", "Reference", "Freq"))

pal <- PNWColors::pnw_palette("Shuksan2", 100)

(p_cm <- 
    cm_df |> 
    ggplot(aes(x = Reference, y = Prediction, fill = Freq)) +
    geom_tile() +
    geom_text(aes(label = Freq), color = "white", size = 5) +
    scale_fill_gradientn(colors = pal) +
    labs(title = "Confusion Matrix", x = "Actual", y = "Predicted") +
    theme_minimal() +
    theme(
      text = element_text(size = 14),
      panel.grid = element_blank()
    )
)

# ggsave(
#   "figures/confusion_matrix.png",
#   p_cm,
#   width = 7,
#   height = 5,
#   dpi = 500,
#   bg = "white"
# )
```


ROC Curve

```{r}
library(yardstick)

predictions <- 
  tibble(
  truth = d_clean$result,
  prob = predict(logistic_model, type = "response")  # Predicted probabilities
)
# xx <- augment(logistic_model, type.predict = "response") 
# xx |> select(result, .fitted)

roc_data <- 
  predictions %>%
  roc_curve(truth, prob, event_level = "second") 

auc_value <- 
  predictions %>%
  roc_auc(truth, prob, event_level = "second") %>%
  pull(.estimate)

p_roc <-
  roc_data |> 
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_path(color = "#2E9093", linewidth = 1.2) +
  geom_abline(lty = 2, alpha = 0.5) +  # Add the reference line
  coord_equal() +  # Force the plot to be square
  labs(
    title = "ROC Curve", 
    subtitle = paste("AUC =", round(auc_value, 3)),
    x = "False Positive Rate (1 - Specificity)",
    y = "True Positive Rate (Sensitivity)"
  ) +
  theme_minimal() +
  theme(
    # text = element_text(size = 14),
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 12),
    axis.title = element_text(size = 12)
  )

p_roc

# ggsave(
#   "figures/roc_auc.png",
#   p_roc,
#   width = 7,
#   height = 5,
#   dpi = 500,
#   bg = "white"
# )
```


## Model predictions

```{r}
log_troponin_seq <- seq(
  min(d_clean$log_troponin), 
  max(d_clean$log_troponin), 
  length.out = 100
)
log_ckmb_seq <- seq(
  min(d_clean$log_ck_mb), 
  max(d_clean$log_ck_mb), 
  length.out = 100
)

troponin_grid <- exp(
  seq(log(0.001), log(max(d_clean$troponin)), length.out = 100)
)
ckmb_grid <- exp(
  seq(log(0.3), log(max(d_clean$ck_mb)), length.out = 100)
)
```


troponin

```{r}
pred_data <- 
  tibble(
    age = mean(d_clean$age),              
    gender = "Female",                     
    heart_rate = mean(d_clean$heart_rate),
    systolic_blood_pressure = mean(d_clean$systolic_blood_pressure),  
    diastolic_blood_pressure = mean(d_clean$diastolic_blood_pressure),
    blood_sugar = mean(d_clean$blood_sugar),          
    log_ck_mb = quantile(d_clean$log_ck_mb, probs = 0.1),                       
    log_troponin = log_troponin_seq
  )

pred_data$predicted_prob <- 
  predict(
    logistic_model, 
    newdata = pred_data, 
    type = "response"
  )

x_breaks_lab <- c(0.001, 0.01, 0.1, 1, 10)

pred_data |>
  # mutate(troponin = exp(troponin)) |>
  ggplot(aes(x = log_troponin, y = predicted_prob)) +
  geom_line(color = "blue", linewidth = 1) +
  geom_jitter(
    data = d_clean,
    aes(x = log_troponin, y = ifelse(result == "positive", 1, 0)),
    height = 0.02, alpha = 0.2, color = "orange"
  ) +
  scale_x_continuous(
    "Troponin Level",
    breaks = log(x_breaks_lab),
    labels = x_breaks_lab
  ) +
  geom_vline(
    xintercept = exp(quantile(d_clean$troponin, probs = 0.1)), 
    linetype = "dashed", 
    color = "red"
  ) +
  labs(
    title = "Logistic Regression: Probability of Positive Result vs. Troponin",
    # x = "Troponin Level",
    y = "Probability of Positive Result",
    caption = "All other variables held at their mean values"
  ) +
  theme_minimal() 
```

CK MB

```{r}
pred_ck_mb <- 
  tibble(
    age = mean(d_clean$age),              
    gender = "Female",                     
    heart_rate = mean(d_clean$heart_rate),
    systolic_blood_pressure = mean(d_clean$systolic_blood_pressure),  
    diastolic_blood_pressure = mean(d_clean$diastolic_blood_pressure),
    blood_sugar = mean(d_clean$blood_sugar),          
    log_troponin = quantile(d_clean$log_troponin, probs = 0.10),
    log_ck_mb = seq(min(d_clean$log_ck_mb), max(d_clean$log_ck_mb), length.out = 100), 
    
  )

pred_ck_mb$predicted_prob <- 
  predict(logistic_model, 
          newdata = pred_ck_mb, 
          type = "response")

ck_mb_x_breaks_lab <- c(0.3, 3, 30, 300)

pred_ck_mb |> 
  ggplot(aes(x = log_ck_mb, y = predicted_prob)) +
  geom_line(color = "blue", linewidth = 1) +
  geom_jitter(
    data = d_clean, 
    aes(x = log_ck_mb, y = ifelse(result == "positive", 1, 0)), 
    height = 0.02, alpha = 0.2, color = "orange"
  ) +
  labs(
    title = "Logistic Regression: Probability of Positive Result vs. CK-MB",
    x = "CK-MB Level",
    y = "Probability of Positive Result",
    caption = "All other variables held at their mean values"
  ) +
  theme_minimal()
```


Age

```{r}
pred_age <- 
  tibble(
    age = seq(min(d_clean$age), max(d_clean$age), length.out = 100),
    gender = "Male",                     
    heart_rate = mean(d_clean$heart_rate),
    systolic_blood_pressure = mean(d_clean$systolic_blood_pressure),  
    diastolic_blood_pressure = mean(d_clean$diastolic_blood_pressure),
    blood_sugar = mean(d_clean$blood_sugar),          
    log_troponin = quantile(d_clean$log_troponin, probs = 0.5),
    log_ck_mb = quantile(d_clean$log_ck_mb, probs = 0.25), 
    
  )

pred_age$predicted_prob <- 
  predict(logistic_model, 
          newdata = pred_age, 
          type = "response")


pred_age |> 
  ggplot(aes(x = age, y = predicted_prob)) +
  geom_line(color = "blue", linewidth = 1) +
  geom_jitter(
    data = d_clean, 
    aes(x = age, y = ifelse(result == "positive", 1, 0)), 
    height = 0.02, alpha = 0.2, color = "orange"
  ) +
  labs(
    title = "Logistic Regression: Probability of Positive Result vs. Age",
    x = "Age",
    y = "Probability of Positive Result",
    caption = "All other variables held at their mean values"
  ) +
  theme_minimal()
```


```{r}
# Create grid for 2D predictions
log_troponin_seq <- seq(
  min(d_clean$log_troponin), 
  max(d_clean$log_troponin), 
  length.out = 100
)
log_ckmb_seq <- seq(
  min(d_clean$log_ck_mb), 
  max(d_clean$log_ck_mb), 
  length.out = 100
)



log_troponin_ckmb_grid <- expand_grid(
  log_troponin = log_troponin_seq,
  log_ck_mb = log_ckmb_seq
)

# Add mean values for other predictors
prediction_grid <- 
  log_troponin_ckmb_grid %>%
  mutate(
    age = mean(d_clean$age),
    gender = levels(d_clean$gender)[1],
    heart_rate = mean(d_clean$heart_rate),
    systolic_blood_pressure = mean(d_clean$systolic_blood_pressure),
    diastolic_blood_pressure = mean(d_clean$diastolic_blood_pressure),
    blood_sugar = mean(d_clean$blood_sugar)
  )

# Generate predictions
# grid_preds <- predict(lasso_fit, prediction_grid, type = "prob")
# grid_preds_resp <- predict(lasso_fit, prediction_grid)
grid_preds <- 
  predict(logistic_model, 
          # newdata = log_troponin_ckmb_grid, 
          newdata = prediction_grid,
          type = "response")

# Add predictions to grid
prediction_grid <- bind_cols(
  prediction_grid,
  # log_troponin_ckmb_grid,
  probability = grid_preds
)

# Create probability bins for a continuous color scale instead of discrete
prediction_grid <- 
  prediction_grid %>%
  mutate(prob_bin = cut(probability, 
                        breaks = seq(0, 1, by = 0.1),
                        labels = paste0(seq(0, 90, by = 10), "%")))

# (baypal <- PNWColors::pnw_palette("Bay", 8, type="continuous"))


(
  contour_plot <- 
    ggplot() +
    # Add filled contours with continuous scale
    geom_contour_filled(
      data = prediction_grid,
      aes(x = log_troponin, y = log_ck_mb, z = probability),
      breaks = seq(0, 1, by = 0.1)
    ) +
    # Add decision boundary (probability = 0.5)
    geom_contour(
      data = prediction_grid,
      aes(x = log_troponin, y = log_ck_mb, z = probability),
      breaks = 0.5,
      color = "white",
      linewidth = 1
    ) +
    # Add points for observed data
    geom_point(
      data = d_clean,
      aes(x = log_troponin, y = log_ck_mb, shape = result, color = result),
      alpha = 0.7,
      size = 3
    ) +
    # add example user selected values
    geom_point(
      data = tibble(
        log_troponin = log(0.01), 
        log_ck_mb = log(10),      
        result = "positive"        
      ),
      aes(x = log_troponin, y = log_ck_mb),
      color = "black",
      shape = 9,
      # alpha = 0.7,
      size = 4
    ) +
    scale_x_continuous(
      "Troponin (ng/mL)",
      breaks = log(x_breaks_lab),
      labels = x_breaks_lab
    ) +
    scale_y_continuous(
      "CK-MB (ng/mL)",
      breaks = log(ck_mb_x_breaks_lab),
      labels = ck_mb_x_breaks_lab
    ) +
    scale_color_manual(
      values = c("negative" = "#2E9093", "positive" = "#DD4124"),
      name = "Heart Attack"
    ) +
    scale_shape_manual(
      values = c("negative" = 16, "positive" = 17),
      name = "Heart Attack"
    ) +
    scale_fill_viridis_d(
      option = "plasma",
      name = "Probability",
      labels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", 
                 "50-60%", "60-70%", "70-80%", "80-90%", "90-100%")
    ) +
    labs(
      title = "Heart Attack Probability by Troponin and CK-MB Levels",
      subtitle = "White line shows decision boundary (50% probability)",
      caption = "All other variables held at their mean values"
    ) +
    theme_minimal() +
    theme(
      legend.position = "right",
      plot.title = element_text(face = "bold", size = 14),
      plot.subtitle = element_text(size = 12),
      axis.title = element_text(face = "bold"),
      panel.grid.minor = element_blank(),
      legend.title = element_text(face = "bold")
    )
)
# Print the plot
print(contour_plot)

```


# Save

Save data to be used in Shiny app.

```{r}
saveRDS(logistic_model, file = "model/logistic_model.rds")
saveRDS(reduced_model, file = "model/reduced_model.rds")
saveRDS(d_clean, file = "model/model_data.rds")
saveRDS(log_troponin_seq, file = "model/log_troponin_seq.rds")
saveRDS(log_ckmb_seq, file = "model/log_ckmb_seq.rds")
saveRDS(prediction_grid, file = "model/prediction_grid.rds")
```


